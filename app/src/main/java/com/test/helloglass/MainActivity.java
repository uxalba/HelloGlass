package com.test.helloglass;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import java.util.ArrayList;
import java.util.List;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;
    private int listIndex = 0;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        getWindow().requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);
        mView = buildView();


        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }

    @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu)
    {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS)
        {
            getMenuInflater().inflate(R.menu.activity_menu, menu);
            return true;
        }
        return super.onCreatePanelMenu(featureId, menu);
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item)
    {
        //If featureId passed is a voice command
        if(featureId == WindowUtils.FEATURE_VOICE_COMMANDS)
        {
            //Create an intended action for the recognised voice command
            Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
            if(item.getItemId() == R.id.reset)
            {
                DataManager dataManager = new DataManager(getBaseContext());
                dataManager.setStoredStrings(new ArrayList<String>());
                mView = buildView();
                mCardScroller.getAdapter().notifyDataSetChanged();
                return true;
            }
            else
            {
                //Launch intended action and pass the ID for the menu item selected
                startActivityForResult(intent, item.getItemId());
                return true;
            }
        }
        return super.onMenuItemSelected(featureId, item);
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        List<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
        String spokenText = results.get(0);

        DataManager dataManager = new DataManager(getBaseContext());

        /*if(requestCode == R.id.add_menu_item && resultCode == RESULT_OK)
        {
            ArrayList<String> storedStrings = dataManager.getStoredStrings();
            storedStrings.add(spokenText);
            dataManager.setStoredStrings(storedStrings);
            //listIndex++;
            /*mView = buildView();
            mCardScroller.getAdapter().notifyDataSetChanged();
        }
        else if (requestCode == R.id.remove_menu_item && resultCode == RESULT_OK)
        {
            List<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
            String spokenText = results.get(0);
            DataManager dataManager = new DataManager(getBaseContext());
            List<String> storedStrings = dataManager.getStoredStrings();
            if(storedStrings.contains(spokenText))
            {
                storedStrings.remove(spokenText);
                dataManager.setStoredStrings(new ArrayList<>(storedStrings));
                //listIndex--;
            }
            /*mView = buildView();
            mCardScroller.getAdapter().notifyDataSetChanged();
        }*/
        if (requestCode == R.id.name && resultCode == RESULT_OK)
        {
            ArrayList<String> storedStrings = dataManager.getStoredStrings();
            storedStrings.add("Name: " + spokenText);
            dataManager.setStoredStrings(storedStrings);
        }
        else if (requestCode == R.id.age && resultCode == RESULT_OK)
        {
            ArrayList<String> storedStrings = dataManager.getStoredStrings();
            storedStrings.add("Age: " + spokenText);
            dataManager.setStoredStrings(storedStrings);
        }
        mView = buildView();
        mCardScroller.getAdapter().notifyDataSetChanged();
        super.onActivityResult(requestCode,resultCode,data);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT_FIXED);
        card.setFootnote("Patient's Information");
        DataManager dataManager = new DataManager(getBaseContext());
        ArrayList<String> strings = dataManager.getStoredStrings();
        StringBuilder builder = new StringBuilder();

        if (strings.size() == 0)
        {
            builder.append("Please say 'OK Glass'");
        }
        else
        {
            for(String s : strings)
            {
                builder.append(s).append("\n");
            }
        }

        card.setText(builder.toString());
        return card.getView();
    }

}
